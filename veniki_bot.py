# veniki_bot.py
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# ===== –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ======== –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ========
TOKEN = "7996197814:AAHkD3uQsNc0IJjoxatEuoAJkEK05QR_L6w"
ADMIN_ID = 507208748  # —á–∏—Å–ª–æ–≤–æ–π Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# ===================================

# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ========
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ======== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ ========
VENIKS = {
    "lip": {"label": "üåø –õ–∏–ø–æ–≤—ã–µ", "price": 5},
    "dub": {"label": "üå≥ –î—É–±–æ–≤—ã–µ", "price": 6},
    "bir": {"label": "üçÉ –ë–µ—Ä–µ–∑–æ–≤—ã–µ", "price": 5},
}

# ======== –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ========
class OrderStates(StatesGroup):
    choosing_venik = State()
    choosing_quantity = State()
    choosing_delivery = State()
    confirming = State()

# ======== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (reply keyboard) ========
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add(KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã üåø"))
menu_kb.add(KeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞ üçÉ"))
menu_kb.add(KeyboardButton("üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üå≥"))

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã inline-–∫–Ω–æ–ø–æ–∫ ========
def venik_inline_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for key, v in VENIKS.items():
        kb.insert(InlineKeyboardButton(text=f"{v['label']} ‚Äî {v['price']}—Ä", callback_data=f"venik:{key}"))
    kb.add(InlineKeyboardButton(text="‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel"))
    return kb

def quantity_inline_kb():
    # –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã + –∫–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–æ–µ" (–ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é, –Ω–æ –º—ã –±—É–¥–µ–º –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–¥–µ–Ω–∏—è)
    kb = InlineKeyboardMarkup(row_width=4)
    for q in (1, 2, 5, 10):
        kb.insert(InlineKeyboardButton(text=str(q), callback_data=f"qty:{q}"))
    kb.add(InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="qty:other"))
    kb.add(InlineKeyboardButton(text="‚¨Ö –í—ã–±—Ä–∞—Ç—å –≤–µ–Ω–∏–∫", callback_data="back_to_venik"))
    return kb

def delivery_inline_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üåø", callback_data="delivery:self"))
    kb.add(InlineKeyboardButton(text="–ü–æ—á—Ç–∞ üì¶", callback_data="delivery:mail"))
    kb.add(InlineKeyboardButton(text="‚¨Ö –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="back_to_qty"))
    return kb

def confirm_inline_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm:yes"))
    kb.add(InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm:edit"))
    kb.add(InlineKeyboardButton(text="‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel"))
    return kb

# ======== –•—ç–Ω–¥–ª–µ—Ä—ã: —Å—Ç–∞—Ä—Ç –∏ –º–µ–Ω—é ========
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    try:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: %s", e)

@dp.message_handler(lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã üåø")
async def show_contacts(message: types.Message):
    try:
        await message.answer(
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "+375257388194\n"
            "+375333241573\n\n"
            "‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 8:00 ‚Äî 20:00"
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ show_contacts: %s", e)

@dp.message_handler(lambda m: m.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞ üçÉ")
async def show_delivery_info(message: types.Message):
    try:
        await message.answer(
            "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞:\n"
            "‚Ä¢ –°–∞–º–æ–≤—ã–≤–æ–∑ ‚Äî –≥. –ü–æ—Å—Ç–∞–≤—ã (8:00‚Äì20:00)\n"
            "‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π ‚Äî —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ\n\n"
            "–û–ø–ª–∞—Ç–∞ ‚Äî –ø–æ —Ñ–∞–∫—Ç—É"
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ show_delivery_info: %s", e)

# ======== –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ ========
@dp.message_handler(lambda m: m.text == "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üå≥")
async def start_order(message: types.Message):
    try:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–µ–Ω–∏–∫–æ–≤
        await message.answer("üåø –®–∞–≥ 1/3 ‚Äî –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ–Ω–∏–∫–∞:", reply_markup=venik_inline_kb())
        await OrderStates.choosing_venik.set()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start_order: %s", e)

# ======== –í—ã–±–æ—Ä –≤–µ–Ω–∏–∫–∞ (inline) ========
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("venik:"), state=OrderStates.choosing_venik)
async def on_venik_selected(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, key = callback.data.split(":")
        if key not in VENIKS:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
            return
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        await state.update_data(venik_key=key)
        venik_label = VENIKS[key]["label"]
        price = VENIKS[key]["price"]
        await bot.send_message(callback.from_user.id, f"üåø –í—ã –≤—ã–±—Ä–∞–ª–∏: {venik_label} ‚Äî {price}—Ä\n\n–®–∞–≥ 2/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=quantity_inline_kb())
        await OrderStates.choosing_quantity.set()
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ on_venik_selected: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", show_alert=True)

# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ / –æ—Ç–º–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data == "cancel", state="*")
async def on_cancel(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()
        await bot.send_message(callback.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu_kb)
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ on_cancel: %s", e)

# ======== –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (inline) ========
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("qty:"), state=OrderStates.choosing_quantity)
async def on_qty_selected(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, qty = callback.data.split(":")
        if qty == "other":
            # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç,
            # –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–∂–ª–∏–≤–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ (–º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞–¥–µ–Ω–∏—è).
            await bot.send_message(callback.from_user.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ '‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.",
                                   reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")))
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            await state.update_data(expect_custom_qty=True)
            await callback.answer()
            return

        # –±—ã—Å—Ç—Ä–∞—è –æ–ø—Ü–∏—è
        try:
            qty_int = int(qty)
            if qty_int <= 0:
                raise ValueError
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", show_alert=True)
            return

        await state.update_data(quantity=qty_int)
        data = await state.get_data()
        venik_key = data.get("venik_key")
        if not venik_key:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–∏–∫.", show_alert=True)
            await state.finish()
            return

        venik_label = VENIKS[venik_key]["label"]
        price = VENIKS[venik_key]["price"]
        total = price * qty_int

        await bot.send_message(callback.from_user.id,
                               f"üåø –í—ã: {venik_label}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_int}\n–¶–µ–Ω–∞ –∑–∞ —à—Ç.: {price}—Ä\n–ò—Ç–æ–≥–æ: {total}—Ä\n\n–®–∞–≥ 3/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
                               reply_markup=delivery_inline_kb())
        await OrderStates.choosing_delivery.set()
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ on_qty_selected: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Ç–µ–∫—Å—Ç) ========
@dp.message_handler(lambda m: m.text.isdigit(), state="*")
async def handle_custom_quantity_text(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data.get("expect_custom_qty"):
            # —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–µ —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–ø–æ–ø—Ä–æ—Å–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏)
            return
        qty_int = int(message.text)
        if qty_int <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        await state.update_data(quantity=qty_int)
        await state.update_data(expect_custom_qty=False)

        venik_key = data.get("venik_key")
        if not venik_key:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–∏–∫ —á–µ—Ä–µ–∑ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'.")
            await state.finish()
            return

        venik_label = VENIKS[venik_key]["label"]
        price = VENIKS[venik_key]["price"]
        total = price * qty_int

        await message.answer(
            f"üåø –í—ã: {venik_label}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty_int}\n–¶–µ–Ω–∞ –∑–∞ —à—Ç.: {price}—Ä\n–ò—Ç–æ–≥–æ: {total}—Ä\n\n–®–∞–≥ 3/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=delivery_inline_kb()
        )
        await OrderStates.choosing_delivery.set()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ handle_custom_quantity_text: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–µ–Ω–∏–∫–æ–≤"
@dp.callback_query_handler(lambda c: c.data == "back_to_venik", state=OrderStates.choosing_quantity)
async def back_to_venik(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.update_data(expect_custom_qty=False)
        await bot.send_message(callback.from_user.id, "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –≤–µ–Ω–∏–∫–æ–≤:", reply_markup=venik_inline_kb())
        await OrderStates.choosing_venik.set()
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ back_to_venik: %s", e)

# ======== –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ ========
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("delivery:"), state=OrderStates.choosing_delivery)
async def on_delivery_selected(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, method = callback.data.split(":")
        if method not in ("self", "mail"):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
            return

        await state.update_data(delivery=method)
        data = await state.get_data()
        venik_key = data.get("venik_key")
        qty = data.get("quantity")
        price = VENIKS[venik_key]["price"] if venik_key else 0
        venik_label = VENIKS[venik_key]["label"] if venik_key else "‚Äî"
        total = price * (qty or 0)
        delivery_text = "–°–∞–º–æ–≤—ã–≤–æ–∑ üåø" if method == "self" else "–ü–æ—á—Ç–∞ üì¶"

        await bot.send_message(
            callback.from_user.id,
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n{venik_label}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}\n–ò—Ç–æ–≥–æ: {total}—Ä",
            reply_markup=confirm_inline_kb()
        )
        await OrderStates.confirming.set()
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ on_delivery_selected: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "back_to_qty", state=OrderStates.choosing_delivery)
async def back_to_qty(callback: types.CallbackQuery, state: FSMContext):
    try:
        await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=quantity_inline_kb())
        await OrderStates.choosing_quantity.set()
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ back_to_qty: %s", e)

# ======== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ========
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm:"), state=OrderStates.confirming)
async def on_confirm(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, action = callback.data.split(":")
        if action == "edit":
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–µ–Ω–∏–∫–æ–≤
            await bot.send_message(callback.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–∏–∫:", reply_markup=venik_inline_kb())
            await OrderStates.choosing_venik.set()
            await callback.answer()
            return
        if action != "yes":
            await callback.answer()
            return

        # —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        data = await state.get_data()
        venik_key = data.get("venik_key")
        qty = data.get("quantity")
        delivery = data.get("delivery")
        venik_label = VENIKS[venik_key]["label"] if venik_key else "‚Äî"
        price = VENIKS[venik_key]["price"] if venik_key else 0
        total = price * (qty or 0)
        delivery_text = "–°–∞–º–æ–≤—ã–≤–æ–∑ üåø" if delivery == "self" else "–ü–æ—á—Ç–∞ üì¶"

        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(callback.from_user.id,
                                   f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n{venik_label}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}\n–ò—Ç–æ–≥–æ: {total}—Ä\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e)

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∑–∞—â–∏—â–µ–Ω–æ)
        order_text = (
            f"üåø –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '‚Äî'} ({callback.from_user.id})\n"
            f"{venik_label} ‚Äî {qty} —à—Ç.\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}\n"
            f"–ò—Ç–æ–≥–æ: {total}—Ä"
        )
        try:
            await bot.send_message(ADMIN_ID, order_text)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", e)

        await state.finish()
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ on_confirm: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# ======== –ó–∞—â–∏—Ç–∞: –ª—é–±—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ callback_data ========
@dp.callback_query_handler(lambda c: True)
async def unknown_callback(callback: types.CallbackQuery):
    try:
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", show_alert=False)
    except Exception:
        pass

# ======== –ù–µ-–æ–Ω–ª–∞–π–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—Å–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏) ========
@dp.message_handler()
async def fallback_text(message: types.Message):
    try:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ üåø", reply_markup=menu_kb)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ fallback_text: %s", e)

# ======== –ó–∞–ø—É—Å–∫ polling ========
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... üåø")
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ polling: %s", e)
